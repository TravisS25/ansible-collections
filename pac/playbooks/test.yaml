---
- name: Setup droplet
  hosts: localhost
  gather_facts: yes

  tasks:
    - name: Set minio facts
      set_fact:
        mounts: []

    - name: Loop through mount range
      loop: "{{ range(1, 3) | list }}"
      debug:
        msg: "{{ item }}"
    # - name: Include vars from file
    #   include_vars:
    #     file: "{{ include_vars_file }}"
    #     name: file_vars

    # - name: Assert droplets list passed
    #   assert:
    #     that:
    #       - file_vars.droplets is defined
    #       - file_vars.droplets | type_debug == "list"
    #       - file_vars.droplets | length > 0
    #     fail_msg: Variable "droplets" is not defined / not a list

    # - name: Assert droplet list has correct properties
    #   loop: "{{ file_vars.droplets }}"
    #   assert:
    #     that:
    #       - item.host is defined
    #       - item.docker_containers is defined
    #       - item.docker_containers | type_debug == 'list'
    #       - item.docker_containers | length > 0
    #     fail_msg: |
    #       Requirements for each droplet object is:

    #       host: FQDN/IP of host to connect to
    #       docker_containers: List of docker types to install on servers

    # - name: Assert correct docker types
    #   loop: "{{ file_vars.droplets | subelements('docker_containers') }}"
    #   assert:
    #     that: item.1.name in all_defaults.docker_container
    #     fail_msg: "{{ item.1.name }} is invalid docker type"

    # - name: Assert custom user creds are correct if set
    #   loop: "{{ file_vars.droplets }}"
    #   when: item.user_creds is defined
    #   assert:
    #     that:
    #       - item.user_creds.username is defined
    #       - item.user_creds.groups is defined
    #       - item.user_creds.groups | type_debug == 'list'
    #       - item.user_creds.groups | length > 0
    #     fail_msg: Must set username and have at least one group attached to user

    # - name: Assert mounts are correct if set
    #   loop: "{{ file_vars.droplets | subelements('mounts', skip_missing=True) }}"
    #   assert:
    #     that:
    #       - item.1.device is defined
    #       - item.1.mount_point is defined
    #     fail_msg: Must set "device" and "mount_point" variables
