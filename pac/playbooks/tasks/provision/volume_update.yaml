---
- name: Import volume info playbook
  import_playbook: volume_info.yaml

- name: Digital Ocean Volume Update
  hosts: localhost

  tasks:
    - name: Setting volume facts
      set_fact:
        volume_commands:
          - create
          - attach
          - both
        volume_states:
          - present
          - absent
        pb_volume_size: "{{ volume_size | mandatory }}"
        pb_volume_command: "{{ volume_command | mandatory }}"
        pb_volume_state: "{{ volume_state | mandatory }}"
        pb_volume_objects: "{{ volume_objects | default([]) }}"
    - name: Assert volume state is valid
      assert:
        that: pb_volume_state in volume_states
        fail_msg: 'Invalid volume state "{{ pb_volume_state }}".  Valid volume states are {{ volume_states }}'
    - name: Assert volume command is valid
      assert:
        that: pb_volume_command in volume_commands
        fail_msg: 'Invalid volume command "{{ pb_volume_command }}".  Valid volume commands are {{ volume_commands }}'
    - name: Assert volume size is postive integer
      assert:
        that: 
          - pb_volume_size is integer
          - pb_volume_size > 0
        fail_msg: 'Invalid volume size "{{ pb_volume_size }}".  Volume size must be a postive integer'
    - name: Assert volume objects defined and is list
      assert:
        that: 
          - pb_volume_objects | type_debug == "list"
          - pb_volume_objects | length > 0
        fail_msg: '"volume_names" variable must be defined and a list with at least 1 entry'
    - name: Assert volume objects contain required keys
      assert:
        that: 
          - item is mapping
          - item.volume_name is defined
          - item.volume_name | length >= 3
        fail_msg: "volume_objects" must contain key "volume_name" and have a length of at least 3 characters
      with_items: "{{ pb_volume_objects }}"
    - name: Assert region slugs defined and is list
      assert:
        that: 
          - region_slugs is defined  
          - region_slugs | type_debug == "list"
          - region_slugs | length > 0
        fail_msg: '"region_slugs" variable must be defined and a list with at least 1 entry'
    - name: Assert volume region exists in region_slugs
      assert:
        that: 
          - region is defined
          - region in pb_region_slugs
        fail_msg: '"{{ region }}" does not exist in "pb_region_slugs"'
    - name: Assert droplet_id is defined
      assert:
        that: droplet_id is defined
        fail_msg: '"droplet_id" variable is required when "volume_command" is set to "attached" or "both"'
      when: pb_volume_command != 'create'
    - name: Assert no duplicate volume names when creating volumes
      assert:
        that: item.0 != item.1.volume_name
        fail_msg: 'Duplicate volume name "{{ item.0 }}"'
      loop: "{{ pb_server_volume_names | product(pb_volume_objects) | list }}"
      when: pb_volume_command != 'attach'
    - name: Create volume(s)(prod)
      community.digitalocean.digital_ocean_block_storage:
        volume_name: "{{ item.volume_name }}"
        block_size: "{{ item.block_size }}"
        description: "{{ item.volume_description | default(null) }}"
      with_items: "{{ pb_volume_objects }}"
      when: run_type == 'prod' and pb_volume_command != 'attach'
      register: pb_volume_return
    - name: Gather package facts
      package_facts:
        manager: auto
      when: run_type == 'local'
    - name: Install vagrant if not already installed
      shell: |
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main
        apt-get update && sudo apt-get install vagrant
      become: true
      when: run_type == 'local' and 'vagrant' not in ansible_facts.packages
    - name: Download ubuntu server 20.04 for vagrant
      command: vagrant box add peru/ubuntu-20.04-server-amd64
      when: run_type == 'local'
    - name: Create volume(s)(local/test)
      traviss25.test.digitalocean.volume_update:
        volume_name: "{{ item.volume_name }}"
        description: "{{ item.volume_description | default(null) }}"
        block_size: "{{ pb_volume_size }}"
        volume_command: "{{ pb_volume_command }}"
        server_volume_names: "{{ pb_server_volume_names }}"
        region: " {{ region }}"
        region_slugs: "{{ region_slugs }}"
      with_items: "{{ pb_volume_objects }}"
      when: run_type == 'local' and pb_volume_command != 'attach'