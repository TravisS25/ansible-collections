---
- name: Set base facts for cockroachdb deploy
  set_fact:
    vault_port: "{{ root_var.vault.port | default(all_defaults.vault_port) }}"
    cockroachdb_docker_certs_dir: /cockroach/certs
    cockroachdb_container_name: cockroachdb
    tmp_node_cert_file: /tmp/node-cert.json
    tmp_client_cert_file: /tmp/client-cert.json
    insecure: "{{ root_var.insecure | default(cockroachdb_defaults.insecure) }}"
    action: "{{ root_var.action | default(all_defaults.action) }}"
    
- name: Set command facts for cockroachdb
  set_fact:
    insecure_start_command:
      - start
      - --insecure
      - "--join={{ root_var.cluster_join }}"
    insecure_init_command:
      - /bin/bash
      - -c
      - "/cockroach/cockroach init --insecure"
    start_command:
      - start
      - "--certs-dir={{ cockroachdb_docker_certs_dir }}"
      - "--join={{ root_var.cluster_join }}"
    init_command:
      - /bin/bash
      - -c
      - "/cockroach/cockroach init"

- name: Create cockroach storage path if not exist
  file:
    state: directory
    path: "{{ root_var.storage_path }}"
    mode: 0700

- name: Create cockroach certs dir if not exist
  file:
    state: directory
    path: "{{ root_var.cockroach_certs_dir }}"
    mode: 0700

- name: Determine if we have cert files created yet
  find:
    paths: "{{ root_var.cockroach_certs_dir }}"
    file_type: file
    use_regex: yes
    patterns: [".crt$"]
  register: certs_dir_result

- when: certs_dir_result.matched == 0
  block:
    - name: Set cockroach deploy facts
      set_fact:
        # Going to change this in the future to use FQDN but have
        # to determine how to set up DNS for that, using ip for now
        base_url: "http://{{ root_var.vault.ip }}{{ vault_port }}/v1"
        cockroach_vault_uri_settings: &base_vault_uri_settings_ref
          method: post
          body_format: json
          headers:
            X-Vault-Token: "{{ root_var.vault.token }}"

    - name: Generate node cert/key
      uri:
        <<: *base_vault_uri_settings_ref
        url: "{{ base_url }}{{ root_var.vault.cert_settings.int_pki_mount_point }}/issue/{{ root_var.vault.cert_settings.issue_role }}"
        body: "{{ root_var.node_cert_request }}"
      register: cockroachdb_node_cert_res

    - name: Generate user cert/key
      uri:
        <<: *base_vault_uri_settings_ref
        url: "{{ base_url }}{{ root_var.vault.cert_settings.int_pki_mount_point }}/issue/{{ root_var.vault.cert_settings.issue_role }}"
        body: "{{ root_var.client_cert_request }}"
      register: cockroachdb_client_cert_res

    - name: Write CA cert to cockroachdb directory
      copy:
        dest: "{{ root_var.cockroach_certs_dir }}/ca.crt"
        content: "{{ cockroachdb_node_cert_res['json']['data']['issuing_ca'] }}"
        mode: 0700

    - name: Write node cert to cockroachdb directory
      copy:
        dest: "{{ root_var.cockroach_certs_dir }}/node.crt"
        content: "{{ cockroachdb_node_cert_res['json']['data']['certificate'] }}"
        mode: 0700

    - name: Write node key to cockroachdb directory
      copy:
        dest: "{{ root_var.cockroach_certs_dir }}/node.key"
        content: "{{ cockroachdb_node_cert_res['json']['data']['private_key'] }}"
        mode: 0700

    - name: Write client cert to cockroachdb directory
      copy:
        dest: "{{ root_var.cockroach_certs_dir }}/client.{{ root_var.client_cert_request.common_name }}.crt"
        content: "{{ cockroachdb_client_cert_res['json']['data']['certificate'] }}"
        mode: 0700

    - name: Write client key to cockroachdb directory
      copy:
        dest: "{{ root_var.cockroach_certs_dir }}/client.{{ root_var.client_cert_request.common_name }}.key"
        content: "{{ cockroachdb_client_cert_res['json']['data']['private_key'] }}"
        mode: 0700

- name: Import cockroachdb docker task
  import_role:
    name: traviss25.pac.docker
    tasks_from: cockroachdb
  vars:
    image: cockroachdb/cockroach:v22.1.9
    command: "{% if root_var.insecure %}{{ insecure_start_command }}{% else %}{{ start_command }}{% endif %}"
    action: "{{ root_var.action }}"
    storage_path: "{{ root_var.storage_path }}"
    container_name: "{{ cockroachdb_container_name }}"
    certs_dir: "{{ root_var.cockroach_certs_dir }}"
    docker_certs_dir: "{{ cockroachdb_docker_certs_dir }}"

- name: Check cluster health
  

- name: Init cluster
  when: certs_dir_result.matched == 0
  async: 30
  community.docker.docker_container_exec:
    container: "{{ cockroachdb_container_name }}"
    argv: "{% if insecure %}{{ insecure_init_command }}{% else %}{{ init_command }}{% endif %}"
  # ignore_errors: yes
  # register: init_cluster
  # until: not init_cluster.failed
  # retries: 5
  # delay: 5

# - name: Debug heeeeeeere
#   debug:
#     msg: "{{ init_cluster }}"
