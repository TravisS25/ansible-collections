---
- name: Set vault facts
  set_fact:
    secret_shares: "{{ root_var.secret_shares | default(vault_defaults.secret_shares) }}"
    secret_threshold: "{{ root_var.secret_threshold | default(vault_defaults.secret_threshold) }}"
    host: "{{ root_var.host | default(vault_defaults.host) }}"
    vault_token: "{{ root_var.token | default(omit) }}"
    action: "{{ root_var.action | default(vault_defaults.action) }}"
    tmp_tokens_file: /tmp/tokens
    valid_status_codes:
      - 200
      - 204
    vault_params: &vault_params_ref
      name: vault
      image: vault:1.11.4
      hostname: vault
      restart_policy: always
      publish_all_ports: yes
      published_ports:
        - 8200:8200
        - 8201:8201
      capabilities:
        - IPC_LOCK
      volumes:
        - "{{ root_var.config_dir }}:/vault/config"
        - "{{ root_var.storage_path }}:/vault/file"
      command:
        - vault
        - server
        - -config=/vault/config

- name: Copy vault config dir to remote server
  copy:
    src: "{{ role_path }}/files/vault/"
    dest: "{{ root_var.config_dir }}"

- name: Start container
  when: action == 'start'
  community.docker.docker_container:
    <<: *vault_params_ref

- name: Restart container
  when: action == 'restart'
  community.docker.docker_container:
    state: started
    restart: yes
    <<: *vault_params_ref

- name: Stop container
  when: action == 'stop'
  community.docker.docker_container:
    state: stopped
    <<: *vault_params_ref

- when: action != 'stop'
  block:
    - name: Import vault init task
      import_role:
        name: traviss25.util.hashicorp_vault
        tasks_from: init
      vars:
        host: "{{ host }}"
        local_keys_file_store: "{{ root_var.local_keys_file_store }}"
        local_tokens_file_store: "{{ root_var.local_tokens_file_store }}"
        secret_shares: "{{ secret_shares }}"
        secret_threshold: "{{ secret_threshold }}"

    - when: not hostvars['localhost']['was_vault_initialized']
      block:
        - name: Set vault init facts
          set_fact:
            base_url: "{{ host }}/v1"
            vault_token: "{{ hostvars['localhost']['vault_token'] }}"
            token_list: []
            root_mount_api: "{{ root_var.pki_settings.root.mount_api | combine({'type': 'pki'}) }}"
            int_mount_api: "{{ root_var.pki_settings.int.mount_api | combine({'type': 'pki'}) }}"
            base_vault_uri_settings: &base_vault_uri_settings_ref
              method: post
              body_format: json
              status_code: "{{ valid_status_codes }}"
              headers:
                X-Vault-Token: "{{ vault_token }}"

        - name: fksd;fk;fl
          debug:
            msg: "{{ root_mount_api }}"

        - name: Enable root pki
          uri:
            <<: *base_vault_uri_settings_ref
            url: "{{ base_url }}/sys/mounts/{{ root_var.pki_settings.root.mount_path }}"
            body: "{{ root_mount_api }}"

        - name: Generate root cert
          uri:
            <<: *base_vault_uri_settings_ref
            url: "{{ base_url }}/{{ root_var.pki_settings.root.mount_path }}/root/generate/internal"
            body: "{{ root_var.pki_settings.root.cert_api }}"

        - name: Set root url configuration
          uri:
            <<: *base_vault_uri_settings_ref
            url: "{{ base_url }}/{{ root_var.pki_settings.root.mount_path }}/config/urls"
            body: "{{ root_var.pki_settings.root.url_api }}"

        - name: Configure root role
          uri:
            <<: *base_vault_uri_settings_ref
            url: "{{ base_url }}/{{ root_var.pki_settings.root.mount_path }}/roles/{{ root_var.pki_settings.root.role_api.role_name }}"
            body: "{{ root_var.pki_settings.root.role_api }}"

        - name: Enable intermediate pki
          uri:
            <<: *base_vault_uri_settings_ref
            url: "{{ base_url }}/sys/mounts/{{ root_var.pki_settings.int.mount_path }}"
            body: "{{ int_mount_api }}"

        - name: Generate CSR
          uri:
            <<: *base_vault_uri_settings_ref
            url: "{{ base_url }}/{{ root_var.pki_settings.int.mount_path }}/intermediate/generate/internal"
            body: "{{ root_var.pki_settings.int.cert_api }}"
          register: intermediate_csr_res

        - name: Update int sign cert api
          set_fact:
            int_sign_cert_api: "{{ root_var.pki_settings.int.sign_cert_api | combine({'csr': intermediate_csr_res.json['data']['csr']}) }}"

        - name: Sign CSR
          uri:
            <<: *base_vault_uri_settings_ref
            url: "{{ base_url }}/{{ root_var.pki_settings.root.mount_path }}/root/sign-intermediate"
            body: "{{ int_sign_cert_api }}"
          register: signed_csr_res

        - name: Set signed cert
          uri:
            <<: *base_vault_uri_settings_ref
            url: "{{ base_url }}/{{ root_var.pki_settings.int.mount_path }}/intermediate/set-signed"
            body:
              certificate: "{{ signed_csr_res.json['data']['certificate'] }}"

        - name: Set intermediate url configuration
          uri:
            <<: *base_vault_uri_settings_ref
            url: "{{ base_url }}/{{ root_var.pki_settings.int.mount_path }}/config/urls"
            body: "{{ root_var.pki_settings.int.url_api }}"

        - name: Configure intermediate role
          uri:
            <<: *base_vault_uri_settings_ref
            url: "{{ base_url }}/{{ root_var.pki_settings.int.mount_path }}/roles/{{ root_var.pki_settings.int.role_api.role_name }}"
            body: "{{ root_var.pki_settings.int.role_api }}"

        # - name: Enable app role
        #   uri:
        #     url: "{{ host }}/v1/sys/mounts/{{ root_var.app_role_settings.mount_path }}"
        #     method: post
        #     body_format: json
        #     status_code: "{{ valid_status_codes }}"
        #     headers:
        #       X-Vault-Token: "{{ vault_token }}"
        #     body:
        #       type: "approle"
        #       description: App role engine for pac application
        #       config:
        #         force_no_cache: true

        - name: Import vault settings
          import_role:
            name: traviss25.pac.util
            tasks_from: vault_util
          vars:
            policy_settings: "{{ root_var.policy_settings }}"
            token_settings: "{{ root_var.token_settings }}"
            vault_token: "{{ vault_token }}"
            valid_status_codes: "{{ valid_status_codes }}"
            base_url: "{{ base_url }}"

        - name: Create tokens
          loop: "{{ root_var.token_settings.tokens }}"
          uri:
            <<: *base_vault_uri_settings_ref
            url: "{{ base_url }}/auth/token/create/{{ item.role_name }}"
            body: "{{ item }}"
          register: new_token_results

        - name: Extract tokens
          loop: "{{ new_token_results.results }}"
          vars:
            token_object:
              display_name: "{{ item['item']['display_name'] | default('') }}"
              client_token: "{{ item['json']['auth']['client_token'] }}"
          set_fact:
            token_list: "{{ token_list + [token_object] }}"

        - name: Write tokens to temp file
          copy:
            content: "{{ token_list }}"
            dest: "{{ tmp_tokens_file }}"

        - name: Write token content to current host
          fetch:
            flat: true
            src: "{{ tmp_tokens_file }}"
            dest: "{{ root_var.local_tokens_file_store }}"

        - name: Remove temp tokens file
          file:
            path: "{{ tmp_tokens_file }}"
            state: absent

    - name: Import vault settings
      when: hostvars['localhost']['was_vault_initialized']
      import_role:
        name: traviss25.pac.util
        tasks_from: vault_util
      vars:
        policy_settings: "{{ root_var.policy_settings }}"
        token_settings: "{{ root_var.token_settings }}"
        vault_token: "{{ vault_token }}"
        valid_status_codes: "{{ valid_status_codes }}"
        base_url: "{{ base_url }}"
