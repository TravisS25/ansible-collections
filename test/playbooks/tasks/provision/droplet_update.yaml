---
- name: Import Environment Setup Playbook
  import_playbook: ../setup.yaml

- name: Import Vagrant Setup Playbook
  import_playbook: ../vagrant_setup.yaml
  when: pb_run_type == 'local'

- name: Setting Up Droplet Environment
  hosts: localhost
  
  tasks:
    - name: Setting static facts
      set_fact:
        providers:
          local: ../providers/local/setup.yaml
          digitalocean: ../providers/digitalocean/setup.yaml
        pb_storage_droplet_types:
          - db_servers
          - storage_servers 
        pb_droplet_states:
          - present
          - absent
          - active
          - inactive
        pb_droplet_types: "{{ [pb_storage_droplet_types, 'control_plane_servers', 'web_servers', 'proxy_servers'] | flatten }}"
        # pb_droplet_config: "{{ droplet_config | mandatory }}"
        # pb_droplet_state: "{{ droplet_state | default('present') }}"
        # pb_droplet_size: "{{ droplet_size | mandatory }}"
        # pb_droplet_type: "{{ droplet_type | mandatory }}"
    - name: Enter Droplet State
      pause:
        prompt: "Enter the state you want droplet(s) to be in? (Choices: {{ pb_droplet_states }})"
      register: droplet_state_result
      until: droplet_state_result.user_input in droplet_states
    - name: Enter Droplet Type
      pause:
        prompt: "Enter the type of droplet(s) you are creating/edting"
    # - name: Assert droplet config is dict
    #   assert:
    #     that: 
    #       - droplet_config | type_debug == "dict"
    #       - droplet_config.droplet
    #     fail_msg: 'Invalid droplet state "{{ pb_droplet_state }}".  Valid droplet states are {{ droplet_states }}'
    # - name: Assert droplet state is valid
    #   assert:
    #     that: pb_droplet_state in droplet_states
    #     fail_msg: 'Invalid droplet state "{{ pb_droplet_state }}".  Valid droplet states are {{ droplet_states }}'
    # - name: Assert droplet type is valid
    #   assert:
    #     that: pb_droplet_type in pb_droplet_types
    #     fail_msg: 'Invalid droplet type "{{ pb_droplet_type }}".  Valid droplet types are {{ pb_droplet_types }}'
    - name: Assert volume_names variable is list type if defined
      assert:
        that: volume_names | type_debug == "list"
        fail_msg: "volume_names" variable must be a list if defined
      when: volume_names is defined
    - name: Assert volume_names variable is list of string
      assert:
        that: item | type_debug == "str"
        fail_msg: All values in "volume_names" variable must be str type
      with_items: "{{ volume_names }}"
      when: volume_names is defined
    # - name: Assert region list url defined when run type is "local"
    #   assert:
    #     that: pb_region_list_url is defined
    #     fail_msg: "pb_region_list_url" must be set when "pb_run_type" is set to "local"
    #   when: pb_run_type == 'local'

# - name: Import region info playbook
#   import_playbook: region_info.yaml

- name: Import region validation playbook
  import_playbook: region_validation.yaml
  vars:
    run_type: "{{ pb_run_type }}"
    oauth_token: "{{ pb_oauth_token }}"
    fail_api_call: "{{ fail_region_api_call | default(false) }}"
    region: "{{ region }}"

- name:  Create/Update Droplet(s)
  hosts: localhost

  tasks:
    - name: Assert volume id list set with db server on create/edit droplet action
      assert:
        that: pb_volume_ids | length > 0
        fail_msg: DB servers require at least 1 volume id(s) to be used  
      when: pb_droplet_type == 'db_servers' and pb_droplet_state != 'absent'
    - name: Assert volume id list set with storage server on create/edit droplet action
      assert:
        that: pb_volume_ids | length > 3
        fail_msg: Storage servers require at least 4 volume id(s) to be used  
      when: pb_droplet_type == 'storage_servers' and pb_droplet_state != 'absent'
    - name: Get volume id difference
      set_fact:
        volume_id_diff: "{{ pb_volume_ids | difference(volume_ids) }}"
      when: |
        (run_type == 'prod' or run_type == 'local') and 
        (droplet_type == 'db_servers' or droplet_type == 'storage_servers') and 
        pb_volume_ids is defined
    # - name: Verify settings
    #   pause:
    #     prompt: |
    #       These are the settings about be to performed:

    #       name: {{  }}

    #       Press return to continue. Press Ctrl+c and then "a" to abort

- name: Import provision volume update playbook
  import_playbook: volume_update.yaml
  when: volume_objects is defined