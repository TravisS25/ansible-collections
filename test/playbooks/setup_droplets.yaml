---
- name: Setup droplet
  hosts: localhost

  pre_tasks:
    - name: Assert include_vars_file is defined
      assert:
        that: include_vars_file is defined
      fail_msg: Variable "include_vars_file" is not defined

  tasks:
    - name: Include vars from file
      include_vars:
        file: "{{ include_vars_file }}"
        name: file_vars

    - name: Assert droplets list passed
      assert:
        that:
          - file_vars.droplets is defined
          - file_vars.droplets | type_debug == "list"
          - file_vars.droplets | length > 0
        fail_msg: Variable "droplets" is not defined / not a list

    - name: Assert droplet list has correct properties
      loop: "{{ file_vars.droplets }}"
      assert:
        that:
          - item.host is defined
          - item.docker_types is defined
          - item.docker_types | type_debug == 'list'
          - item.docker_types | length > 0
        fail_msg: |
          Requirements for each droplet object is:

          host: FQDN/IP of host to connect to
          docker_types: List of docker types to install on servers

    - name: Assert correct docker types
      loop: "{{ file_vars.droplets | subelements('docker_types') }}"
      assert:
        that: item.1.name in all_defaults.docker_type
        fail_msg: "{{ item.1.name }} is invalid docker type"

    - name: Assert custom user creds are correct if set
      loop: "{{ file_vars.droplets }}"
      when: item.user_creds is defined
      assert:
        that:
          - item.user_creds.username is defined
          - item.user_creds.groups is defined
          - item.user_creds.groups | type_debug == 'list'
          - item.user_creds.groups | length > 0
        fail_msg: Must set username and have at least one group attached to user

    - name: Assert mounts are correct if set
      loop: "{{ file_vars.droplets | subelements('mounts', skip_missing=True) }}"
      assert:
        that:
          - item.1.device is defined
          - item.1.mount_point is defined
          - item.1.fs is defined
          - item.1.fs in all_fs_choices
        fail_msg: Must set "device", "mount_point" and "fs" variables for each object

    - name: Display settings before execute
      pause: 
        prompt: |
          These are the settings that will be applied. Proceed(y/n)?

          {{ file_vars }}
      register: confirm_prompt
      until: confirm_prompt.user_input == 'y' or confirm_prompt.user_input == 'n'

    - name: Run commands on host machine
      when: confirm_prompt.user_input == 'y'
      loop: "{{ file_vars.droplets }}"
      loop_control:
        loop_var: droplet
      become: true
      delegate_to: "{{ droplet.host }}"
      block:
        - name: Create default user
          when: droplet.user_creds is not defined
          import_role:
            name: user
            tasks_from: create
          vars:
            username: "{{ default({{ all_defaults.box.username }}) }}"
            groups: "{{ default({{ all_defaults.box.groups }}) }}"

        - name: Create custom user
          when: droplet.user_creds is defined
          import_role:
            name: user
            tasks_from: create
          vars:
            username: "{{ droplet.user_creds.username }}"
            groups: "{{ droplet.user_creds.groups }}"

        - name: Create 

        - name: Import docker install role
          import_role:
            name: docker
            tasks_from: install
          vars:
            username: "{{ droplet.user_creds.username | default({{ all_defaults.box.username }}) }}"

        - name: Import docker role images(s)
          loop: "{{ droplet.docker_types }}"
          include_role:
            name: docker_image
            tasks_from: pull
          vars:
            docker_image: "{{ all_defaults.docker_type[{{ item.name }}].docker_image }}"

        - name: Import docker role container(s)
          loop: "{{ droplet.docker_types }}"
          include_role:
            name: docker_container
            tasks_from: "{{ all_defaults.docker_type[{{ item.name }}].docker_container_role }}"
          vars: 
            docker_image: "{{ all_defaults.docker_type[{{ item.name }}].docker_image }}"
            <<: "{{ all_defaults.docker_type[{{ item.name }}].docker_container_vars | default({}) }}"
            <<: "{{ item.vars | default({}) }}"
